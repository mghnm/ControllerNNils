
ControllerNNils.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000402  00800100  00800100  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b10  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac4  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf2  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018af  00000000  00000000  000042f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	ae 20       	and	r10, r14
  6a:	00 b0       	in	r0, 0x00	; 0
  6c:	c8 00       	.word	0x00c8	; ????
  6e:	10 40       	sbci	r17, 0x00	; 0
  70:	81 3f       	cpi	r24, 0xF1	; 241
  72:	a1 a6       	std	Z+41, r10	; 0x29
  74:	a8 3f       	cpi	r26, 0xF8	; 248
  76:	a4 d3       	rcall	.+1864   	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
  78:	00 d5       	rcall	.+2560   	; 0xa7a <__stack+0x17b>
  7a:	f0 d9       	rcall	.-3104   	; 0xfffff45c <__eeprom_end+0xff7ef45c>
  7c:	22 da       	rcall	.-3004   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
  7e:	12 db       	rcall	.-2524   	; 0xfffff6a4 <__eeprom_end+0xff7ef6a4>
  80:	20 8d       	ldd	r18, Z+24	; 0x18
  82:	14 00       	.word	0x0014	; ????

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	e2 e5       	ldi	r30, 0x52	; 82
  98:	f3 e0       	ldi	r31, 0x03	; 3
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a0 30       	cpi	r26, 0x00	; 0
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	25 e0       	ldi	r18, 0x05	; 5
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a2 30       	cpi	r26, 0x02	; 2
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 94 01 	call	0x328	; 0x328 <main>
  ba:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <i2c_init>:
            break;
        case 64:
            TWSR = 0x3;
            break;
        default:
            TWSR = 0x00;
  c2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
            break;
    }
    TWBR = (uint8_t)SET_TWBR;
  c6:	88 e4       	ldi	r24, 0x48	; 72
  c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    // enable
    TWCR = (1 << TWEN);
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	08 95       	ret

000000d4 <i2c_start>:
*                                                                       *
*Anropar:void													        *
************************************************************************/
void i2c_start(uint8_t i2c_addr){
	// i2c start
	TWCR = 0xA4;//(1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
  d4:	94 ea       	ldi	r25, 0xA4	; 164
  d6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1 << TWINT)) == 0);
  da:	ec eb       	ldi	r30, 0xBC	; 188
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	99 23       	and	r25, r25
  e2:	ec f7       	brge	.-6      	; 0xde <i2c_start+0xa>
	
	// send adress
	TWDR = i2c_addr;
  e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = 0x84;//(1 << TWINT)|( 1 << TWEN);
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1 << 7)) == 0);//(1 << TWINT)) == 0);
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <i2c_start+0x1e>
	}
  f8:	08 95       	ret

000000fa <i2c_stop>:
*                                                                       *
*Anropar:void													        *
************************************************************************/
void i2c_stop(void){
    // i2c stop
    TWCR = 0x94;//(1 << TWINT)|(1 << TWSTO)|(1 << TWEN);//or 0x94
  fa:	84 e9       	ldi	r24, 0x94	; 148
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 100:	08 95       	ret

00000102 <i2c_byte>:
*Utdata: void								                            *
*                                                                       *
*Anropar:void													        *
************************************************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
 102:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = 0x84;// (1 << TWINT)|( 1 << TWEN);
 106:	84 e8       	ldi	r24, 0x84	; 132
 108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while((TWCR & (1 << TWINT)) == 0);
 10c:	ec eb       	ldi	r30, 0xBC	; 188
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 23       	and	r24, r24
 114:	ec f7       	brge	.-6      	; 0x110 <i2c_byte+0xe>
}
 116:	08 95       	ret

00000118 <lcd_command>:
            } else {
                lcd_drawPixel(x+i, y+j, !color);
            }
        }
    }
}
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	7c 01       	movw	r14, r24
 126:	16 2f       	mov	r17, r22
 128:	88 e7       	ldi	r24, 0x78	; 120
 12a:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_start>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 81 00 	call	0x102	; 0x102 <i2c_byte>
 134:	11 23       	and	r17, r17
 136:	71 f0       	breq	.+28     	; 0x154 <lcd_command+0x3c>
 138:	e7 01       	movw	r28, r14
 13a:	11 50       	subi	r17, 0x01	; 1
 13c:	01 2f       	mov	r16, r17
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	0e 0d       	add	r16, r14
 146:	1f 1d       	adc	r17, r15
 148:	89 91       	ld	r24, Y+
 14a:	0e 94 81 00 	call	0x102	; 0x102 <i2c_byte>
 14e:	c0 17       	cp	r28, r16
 150:	d1 07       	cpc	r29, r17
 152:	d1 f7       	brne	.-12     	; 0x148 <lcd_command+0x30>
 154:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_stop>
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <lcd_data>:
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	7c 01       	movw	r14, r24
 174:	8b 01       	movw	r16, r22
 176:	88 e7       	ldi	r24, 0x78	; 120
 178:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_start>
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	0e 94 81 00 	call	0x102	; 0x102 <i2c_byte>
 182:	01 15       	cp	r16, r1
 184:	11 05       	cpc	r17, r1
 186:	49 f0       	breq	.+18     	; 0x19a <lcd_data+0x34>
 188:	e7 01       	movw	r28, r14
 18a:	0e 0d       	add	r16, r14
 18c:	1f 1d       	adc	r17, r15
 18e:	89 91       	ld	r24, Y+
 190:	0e 94 81 00 	call	0x102	; 0x102 <i2c_byte>
 194:	c0 17       	cp	r28, r16
 196:	d1 07       	cpc	r29, r17
 198:	d1 f7       	brne	.-12     	; 0x18e <lcd_data+0x28>
 19a:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_stop>
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <lcd_gotoxy>:
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <lcd_gotoxy+0x6>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_gotoxy+0x8>
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	86 31       	cpi	r24, 0x16	; 22
 1bc:	38 f5       	brcc	.+78     	; 0x20c <lcd_gotoxy+0x60>
 1be:	68 30       	cpi	r22, 0x08	; 8
 1c0:	28 f5       	brcc	.+74     	; 0x20c <lcd_gotoxy+0x60>
 1c2:	98 2f       	mov	r25, r24
 1c4:	99 0f       	add	r25, r25
 1c6:	89 0f       	add	r24, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f5 e0       	ldi	r31, 0x05	; 5
 1ce:	80 83       	st	Z, r24
 1d0:	61 83       	std	Z+1, r22	; 0x01
 1d2:	60 55       	subi	r22, 0x50	; 80
 1d4:	69 83       	std	Y+1, r22	; 0x01
 1d6:	91 e2       	ldi	r25, 0x21	; 33
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	98 0f       	add	r25, r24
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	9b 83       	std	Y+3, r25	; 0x03
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 96       	adiw	r24, 0x02	; 2
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	99 27       	eor	r25, r25
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	80 5f       	subi	r24, 0xF0	; 240
 1fc:	8c 83       	std	Y+4, r24	; 0x04
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	8d 83       	std	Y+5, r24	; 0x05
 202:	65 e0       	ldi	r22, 0x05	; 5
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_command>
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcd_home>:
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy>
 224:	08 95       	ret

00000226 <lcd_clrscr>:
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	11 e0       	ldi	r17, 0x01	; 1
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e8       	ldi	r29, 0x80	; 128
 236:	f8 01       	movw	r30, r16
 238:	8d 2f       	mov	r24, r29
 23a:	11 92       	st	Z+, r1
 23c:	8a 95       	dec	r24
 23e:	e9 f7       	brne	.-6      	; 0x23a <lcd_clrscr+0x14>
 240:	6c 2f       	mov	r22, r28
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy>
 248:	60 e8       	ldi	r22, 0x80	; 128
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	c8 01       	movw	r24, r16
 24e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_data>
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	00 58       	subi	r16, 0x80	; 128
 256:	1f 4f       	sbci	r17, 0xFF	; 255
 258:	c8 30       	cpi	r28, 0x08	; 8
 25a:	69 f7       	brne	.-38     	; 0x236 <lcd_clrscr+0x10>
 25c:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_home>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <lcd_init>:
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	6c 97       	sbiw	r28, 0x1c	; 28
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	18 2f       	mov	r17, r24
 282:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_init>
 286:	e8 e6       	ldi	r30, 0x68	; 104
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	de 01       	movw	r26, r28
 28c:	11 96       	adiw	r26, 0x01	; 1
 28e:	9e 01       	movw	r18, r28
 290:	24 5e       	subi	r18, 0xE4	; 228
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	84 91       	lpm	r24, Z
 296:	8d 93       	st	X+, r24
 298:	31 96       	adiw	r30, 0x01	; 1
 29a:	a2 17       	cp	r26, r18
 29c:	b3 07       	cpc	r27, r19
 29e:	d1 f7       	brne	.-12     	; 0x294 <lcd_init+0x2a>
 2a0:	1c 8f       	std	Y+28, r17	; 0x1c
 2a2:	6c e1       	ldi	r22, 0x1C	; 28
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_command>
 2ac:	0e 94 13 01 	call	0x226	; 0x226 <lcd_clrscr>
 2b0:	6c 96       	adiw	r28, 0x1c	; 28
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <lcd_display>:
void lcd_display() {
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	00 e0       	ldi	r16, 0x00	; 0
 2cc:	11 e0       	ldi	r17, 0x01	; 1
#if defined SSD1306
    lcd_gotoxy(0,0);
    lcd_data(&displayBuffer[0][0], DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
#elif defined SH1106
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
        lcd_gotoxy(0,i);
 2d0:	6c 2f       	mov	r22, r28
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy>
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
 2d8:	60 e8       	ldi	r22, 0x80	; 128
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	c8 01       	movw	r24, r16
 2de:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_data>
void lcd_display() {
#if defined SSD1306
    lcd_gotoxy(0,0);
    lcd_data(&displayBuffer[0][0], DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
#elif defined SH1106
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
 2e2:	cf 5f       	subi	r28, 0xFF	; 255
 2e4:	00 58       	subi	r16, 0x80	; 128
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	c8 30       	cpi	r28, 0x08	; 8
 2ea:	91 f7       	brne	.-28     	; 0x2d0 <lcd_display+0xc>
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
    }
#endif
}
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	08 95       	ret

000002f4 <initUART0>:
	
	lcd_gotoxy(x,y);  //line x column y

	lcd_puts(msg);
	lcd_puts(" ");
}
 2f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2f8:	87 e6       	ldi	r24, 0x67	; 103
 2fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2fe:	e0 ec       	ldi	r30, 0xC0	; 192
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
 304:	88 e9       	ldi	r24, 0x98	; 152
 306:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 310:	80 81       	ld	r24, Z
 312:	80 64       	ori	r24, 0x40	; 64
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <uart0_putc>:
 318:	e0 ec       	ldi	r30, 0xC0	; 192
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <uart0_putc+0x4>
 322:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 326:	08 95       	ret

00000328 <main>:

int main(void)
{
	lcd_init(0xAF); 
 328:	8f ea       	ldi	r24, 0xAF	; 175
 32a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_init>
	initUART0();
 32e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <initUART0>
	unsigned int yAxis;
	char xString[4];
	char yString[4];
	
	// Set Port A as Output
	DDRD = 0b01111111;
 332:	8f e7       	ldi	r24, 0x7F	; 127
 334:	8a b9       	out	0x0a, r24	; 10
	//Print_pos(0,0);
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADMUX = (1<<REFS0);
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 33c:	87 e8       	ldi	r24, 0x87	; 135
 33e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		
		char printC[1];
		memset(printC, '\0', sizeof(printC));
		printC[0] = message;
		main_print(0, 0, printC); */
		uart0_putc('z');
 342:	8a e7       	ldi	r24, 0x7A	; 122
 344:	0e 94 8c 01 	call	0x318	; 0x318 <uart0_putc>
		//uart0_puti16((int16_t) message);

		lcd_display();
 348:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_display>
 34c:	fa cf       	rjmp	.-12     	; 0x342 <main+0x1a>

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
